/* AUTO GRID
Related Every Layout: https://every-layout.dev/layouts/grid/
More info on the flexible nature: https://piccalil.li/tutorial/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid/
A flexible layout that will create an auto-fill grid with
configurable grid item sizes

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-s-m)): This defines the space
between each item.

--grid-min-item-size (14rem): How large each item should be
ideally, as a minimum.

--grid-placement (auto-fill): Set either auto-fit or auto-fill
to change how empty grid tracks are handled */

.grid--image-text {
  display: grid;
  gap: var(--gutter, var(--space-s-l));
  background: var(--color-crust);
  padding: var(--gutter, var(--space-s-l));
  border-radius: var(--border-radius);
  border: 2px solid var(--color-text);
}

@media (min-width: 768px) {
  .grid--image-text {
    grid-template-columns: repeat(4, 1fr);
    grid-auto-rows: min-content;
  }

  .grid--image-text picture {
    grid-column: 1 / 2;
    grid-row: 1 / 3;
    align-self: start;
  }

  .grid--image-text p, .grid--image-text h2 {
    grid-column: 2 / 5;
    align-self: start;
  }
}

.grid {
  display: grid;
  grid-template-columns: repeat(
    var(--grid-placement, auto-fill),
    minmax(var(--grid-min-item-size, 16rem), 1fr)
  );
  gap: var(--gutter, var(--space-s-m));
}

.grid[data-rows='masonry'] {
  grid-template-rows: masonry;
  align-items: start;
}

.grid[data-layout='50-50'] {
  --grid-placement: auto-fit;
  --grid-min-item-size: clamp(16rem, 50vw, 28rem);
}

.grid[data-layout='thirds'] {
  --grid-placement: auto-fit;
  --grid-min-item-size: clamp(16rem, 33%, 20rem);
}

